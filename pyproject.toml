[project]
name = "utilpy"
version = "0.1.2"
description = "My Python utility"
authors = [{ name = "kaki005", email = "u097498f@ecs.osaka-u.ac.jp" }]
dependencies = [
    "jax>=0.4.35",
    "equinox>=0.11.9",
    "rich",
    "multipledispatch",
    "scipy",
    "pandas",
    "networkx",
    "matplotlib",
    "catppuccin>=2.4.1",
    "pyyaml>=6.0.2",
    "pathlib>=1.0.1",
    "seaborn>=0.13.2",
]
readme = "README.md"
requires-python = ">= 3.12"

[dependency-groups]
dev = ["pre-commit>=4.1.0", "ruff>=0.8.0"]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"



[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/utilpy"]


[tool.ruff]
line-length = 120 #  1行の最大文字数

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
fixable = ["ALL"]
unfixable = ["F401"] # imported but not used
# 除外するエラーの種類
ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
    "B904", # raise ... from ... になっていない場合のエラーを無視
    # "F401",  # imported but not used
    "UP008",
    "B007",
    "F722",  # for jaxtyping
]
logger-objects = ["logging.logger"]

[tool.ruff.lint.per-file-ignores] # ファイルごとのエラー除外
"__init__.py" = ["F401"]

# isort の設定
[tool.ruff.lint.isort]
known-third-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true # Python3.8互換のための設定

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.mypy]
strict = false
disallow_untyped_calls = false
check_untyped_defs = false
allow_redefinition = true
show_error_context = true      # エラー時のメッセージを詳細表示
show_column_numbers = true     # エラー発生箇所の行数/列数を表示
ignore_missing_imports = true  # import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
disallow_untyped_defs = false  # 関数定義の引数/戻り値に型アノテーション必須
no_implicit_optional = true    # デフォルト引数に None を取る場合型アノテーションに Optional 必須
warn_return_any = true         # 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
# ※ `# type: ignore` が付与されている箇所は mypy のエラーを無視出来る
# warn_unused_ignores = true   # mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
warn_redundant_casts = true # 冗長なキャストに警告
